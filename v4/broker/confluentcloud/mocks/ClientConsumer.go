// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	kafka "github.com/confluentinc/confluent-kafka-go/kafka"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ClientConsumer is an autogenerated mock type for the ClientConsumer type
type ClientConsumer struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *ClientConsumer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *ClientConsumer) Commit() ([]kafka.TopicPartition, error) {
	ret := _m.Called()

	var r0 []kafka.TopicPartition
	if rf, ok := ret.Get(0).(func() []kafka.TopicPartition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.TopicPartition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connection provides a mock function with given fields:
func (_m *ClientConsumer) Connection() *kafka.Consumer {
	ret := _m.Called()

	var r0 *kafka.Consumer
	if rf, ok := ret.Get(0).(func() *kafka.Consumer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Consumer)
		}
	}

	return r0
}

// ReadMessage provides a mock function with given fields: t
func (_m *ClientConsumer) ReadMessage(t time.Duration) (*kafka.Message, error) {
	ret := _m.Called(t)

	var r0 *kafka.Message
	if rf, ok := ret.Get(0).(func(time.Duration) *kafka.Message); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Duration) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeTopics provides a mock function with given fields: topics, rebalanceCb
func (_m *ClientConsumer) SubscribeTopics(topics []string, rebalanceCb kafka.RebalanceCb) error {
	ret := _m.Called(topics, rebalanceCb)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, kafka.RebalanceCb) error); ok {
		r0 = rf(topics, rebalanceCb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClientConsumer interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientConsumer creates a new instance of ClientConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientConsumer(t mockConstructorTestingTNewClientConsumer) *ClientConsumer {
	mock := &ClientConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
