// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	kafka "github.com/confluentinc/confluent-kafka-go/kafka"
	mock "github.com/stretchr/testify/mock"
)

// ClientProducer is an autogenerated mock type for the ClientProducer type
type ClientProducer struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *ClientProducer) Close() {
	_m.Called()
}

// Connection provides a mock function with given fields:
func (_m *ClientProducer) Connection() *kafka.Producer {
	ret := _m.Called()

	var r0 *kafka.Producer
	if rf, ok := ret.Get(0).(func() *kafka.Producer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Producer)
		}
	}

	return r0
}

// Produce provides a mock function with given fields: msg, deliveryChan
func (_m *ClientProducer) Produce(msg *kafka.Message, deliveryChan chan kafka.Event) error {
	ret := _m.Called(msg, deliveryChan)

	var r0 error
	if rf, ok := ret.Get(0).(func(*kafka.Message, chan kafka.Event) error); ok {
		r0 = rf(msg, deliveryChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClientProducer interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientProducer creates a new instance of ClientProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientProducer(t mockConstructorTestingTNewClientProducer) *ClientProducer {
	mock := &ClientProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
