// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: starter.proto

package starter

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for QLDB service

func NewQLDBEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for QLDB service

type QLDBService interface {
	Write(ctx context.Context, in *Record, opts ...client.CallOption) (*emptypb.Empty, error)
	Read(ctx context.Context, in *Id, opts ...client.CallOption) (*Record, error)
}

type qLDBService struct {
	c    client.Client
	name string
}

func NewQLDBService(name string, c client.Client) QLDBService {
	return &qLDBService{
		c:    c,
		name: name,
	}
}

func (c *qLDBService) Write(ctx context.Context, in *Record, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "QLDB.Write", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qLDBService) Read(ctx context.Context, in *Id, opts ...client.CallOption) (*Record, error) {
	req := c.c.NewRequest(c.name, "QLDB.Read", in)
	out := new(Record)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QLDB service

type QLDBHandler interface {
	Write(context.Context, *Record, *emptypb.Empty) error
	Read(context.Context, *Id, *Record) error
}

func RegisterQLDBHandler(s server.Server, hdlr QLDBHandler, opts ...server.HandlerOption) error {
	type qLDB interface {
		Write(ctx context.Context, in *Record, out *emptypb.Empty) error
		Read(ctx context.Context, in *Id, out *Record) error
	}
	type QLDB struct {
		qLDB
	}
	h := &qLDBHandler{hdlr}
	return s.Handle(s.NewHandler(&QLDB{h}, opts...))
}

type qLDBHandler struct {
	QLDBHandler
}

func (h *qLDBHandler) Write(ctx context.Context, in *Record, out *emptypb.Empty) error {
	return h.QLDBHandler.Write(ctx, in, out)
}

func (h *qLDBHandler) Read(ctx context.Context, in *Id, out *Record) error {
	return h.QLDBHandler.Read(ctx, in, out)
}
